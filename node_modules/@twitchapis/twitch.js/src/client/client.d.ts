/// <reference types="node" />
import { IClientOptions, ESteps } from '../interfaces/';
import { BasicUserStructure } from '../structures';
import { ChannelManager, UserManager } from './managers/';
import { WebSocketManager } from './connection/websocket';
import { Logger } from '@promisepending/logger.js';
import { RestManager } from './connection/rest';
import EventEmitter from 'events';
export declare class Client extends EventEmitter {
    channels: ChannelManager;
    user: BasicUserStructure;
    isAnonymous: boolean;
    /**
     * @private
     */
    userManager: UserManager;
    private steps;
    private resolveRunningStep;
    private stepManagerStarted;
    private wsManager;
    private restManager;
    private options;
    private tokenVerified;
    private currentStep;
    private isReady;
    private logger;
    private token;
    private readyAt;
    constructor(options: IClientOptions);
    /**
     * @description Adds a callback function to be execured in a specific step of the client.
     * @param {ESteps} step - The step to wait for
     * @param {any} callback - The callback to execute when the step is reached
     */
    addStepCommand(step: ESteps, callback: () => void): void;
    /**
     * @description Starts the step manager without log in twitch.
     * @returns {Promise<void>}
     */
    start(): Promise<void>;
    /**
     * @description Starts the step manager and log in twitch.
     * @param {?string} token - The token to use for the login
     * @returns {Promise<void>}
     */
    login(token?: string): Promise<void>;
    /**
     * @description Set the client options
     * @param {IClientOptions} options
     * @returns {Promise<void>}
     * @private
     */
    private setOptions;
    /**
     * @description Returns the time bot is connected with twitch in milliseconds
     * @returns {Promise<number>}
     * @example
     * await Client.uptime()
     * @example
     * Client.uptime().then((time) => { })
     */
    uptime(): Promise<number>;
    /**
     * @description returns the client uptime in milliseconds
     * @returns {number} the number of milliseconds since the client is ready
     * @example
     * const uptime = Client.uptime();
     **/
    uptimeSync(): number;
    /**
     * @description Do a ping to twitch and returns the response time in milliseconds
     * @returns {Promise<number>} - The twitch response time in milliseconds
     */
    ping(): Promise<number>;
    /**
     * @description Connects with a twitch channel chat
     * @param {string} channel - The channel name who will be connected
     * @return {Promise<string>} - Resolved when successfully connect with channel
     */
    join(channel: string): Promise<string>;
    /**
     * @description Connects in multiples twitch channels chats
     * @param {Array<string>} channels - The array of channels to join
     * @return {Promise<string>} - Resolved when successfully connect with channel
     */
    multiJoin(channels: string[]): Promise<string>;
    /**
     * @description Disconnects from a twitch channel chat
     * @param {string} channel - The channel name who will be disconnected
     * @returns {Promise<string>} - Resolved with channel name when successfully disconnect with channel
     */
    leave(channel: string): Promise<string>;
    /**
     * @description Disconnects from twitch server and stop the client
     * @returns {Promise<void>}
     */
    disconnect(): Promise<void>;
    /**
     * @Override
     */
    emit(eventName: string | symbol, ...args: any[]): boolean;
    /**
     * @private
     */
    rawEmit(eventName: string | symbol, ...args: any[]): boolean;
    /**
     * @description Get the logger instance
     * @returns {Logger} [Logger] - The logger instance
     */
    getLogger(): Logger;
    /**
     * @description Get the client options
     * @returns {IClientOptions} [IClientOptions] - The client options
     */
    getOptions(): IClientOptions;
    /**
     * @description Get the REST API Manager Instance
     * @returns {RestManager} [RestManager] - The REST API Manager Instance
     */
    getRestManager(): RestManager;
    /**
     * @description Get the WebSocket Manager Instance
     * @returns {WebSocketManager} [WebSocketManager] - The WebSocket Manager Instance
     * @public
     */
    getWebSocketManager(): WebSocketManager;
    /**
     * @private
     */
    setIsReady(isReady: boolean): void;
    private setStep;
    /**
     * @description Get the current client step
     * @returns {ESteps} [ESteps] - The current client step
     */
    getCurrentStep(): ESteps;
    private stepManager;
}
//# sourceMappingURL=client.d.ts.map