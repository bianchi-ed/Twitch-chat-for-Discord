import { ITwitchRoomStateTags } from '../../interfaces';
import { ChannelStructure } from '../../structures';
import { Collection } from '@discordjs/collection';
import { Client } from '..';
export declare class ChannelManager {
    cache: Collection<string, ChannelStructure>;
    private client;
    constructor(client: Client);
    /**
     * @description Returns a channel from the cache
     * @param {string} channelName - The name of the channel
     * @returns {ChannelStructure} - The channel
     */
    get(channelName: string): ChannelStructure;
    /**
     * @description Checks if a channel is in the cache
     * @param {string} channelName - The name of the channel
     * @returns {boolean} - If the channel exists in the cache returns true, else false
     */
    has(channelName: string): boolean;
    /**
     * @description Sets a channel in the cache
     * @param {string} channelName - The name of the channel
     * @param {ChannelStructure} channel - The channel to set
     * @returns {Collection<string, ChannelStructure>} - The updated cache
     */
    set(channelName: string, channel: ChannelStructure): Collection<string, ChannelStructure>;
    /**
     * @description Adds a channel to the cache
     * @param {string} channel - The name of the channel
     * @returns {Collection<string, ChannelStructure>} - The updated cache
     */
    addChannel(channel: ChannelStructure): Collection<string, ChannelStructure>;
    /**
     * @private
     */
    generateChannel(channelName: string): ChannelStructure;
    /**
     * @private
     */
    generateChannelFromTwitch(channelName: string, tags: ITwitchRoomStateTags): ChannelStructure;
    /**
     * @private
     */
    updateChannel(channelName: string, tags: ITwitchRoomStateTags): ChannelStructure;
    private updateFromTags;
}
//# sourceMappingURL=channelManager.d.ts.map