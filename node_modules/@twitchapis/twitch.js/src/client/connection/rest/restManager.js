"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestManager = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
/**
 * @private
 */
class RestManager {
    constructor(client) {
        this.methods = {};
        this.client = client;
        this.methodsPath = path_1.default.resolve(__dirname, 'methods');
    }
    /**
     * @private
     */
    loadAllMethods() {
        return __awaiter(this, void 0, void 0, function* () {
            this.options = this.client.getOptions().http;
            return this.loadMethodsFolder(this.methodsPath);
        });
    }
    loadMethodsFolder(methodsPath) {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.getLogger().debug('Loading Rest Methods...');
            const folders = fs_1.default.readdirSync(methodsPath);
            for (const folder of folders) {
                this.client.getLogger().debug('Loading Rest Methods folder: ' + folder + '...');
                // eslint-disable-next-line no-await-in-loop
                yield this.loadMethods(path_1.default.resolve(this.methodsPath, folder), folder);
                this.client.getLogger().debug('Loaded Rest Methods folder: ' + folder);
            }
            this.client.getLogger().debug('Loaded ' + Object.keys(this.methods).length + ' Rest Methods!');
        });
    }
    loadMethods(methodsPath, methodType) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const methods = fs_1.default.readdirSync(methodsPath);
                for (const method of methods) {
                    if ((method.endsWith('.ts') || method.endsWith('.js')) && !method.includes('.d.ts')) {
                        this.client.getLogger().debug(`Loading Rest Method: ${method} ...`);
                        const methodFileName = method.replace(/(\.js)|(\.ts)/g, '');
                        const methodName = methodType + methodFileName[0].toLocaleUpperCase() + methodFileName.slice(1);
                        const loadedMethod = require(path_1.default.resolve(methodsPath, method));
                        const newMethod = new loadedMethod.default(this.options);
                        this.methods[methodName] = { method: newMethod, execute: newMethod.execute.bind(newMethod) };
                        this.client.getLogger().debug(`Loaded Rest Method: ${methodName}!`);
                    }
                }
                resolve();
            }));
        });
    }
    get(method, ...params) {
        return new Promise((resolve, reject) => {
            if (!method.startsWith('get')) {
                method = 'get' + method[0].toLocaleUpperCase() + method.slice(1);
            }
            if (!this.methods[method]) {
                reject(new Error(`Method Get ${method} not found!`));
            }
            if (!params)
                params = [];
            this.methods[method].execute(params).then(resolve).catch(reject);
        });
    }
    post(method, params) {
        return new Promise((resolve, reject) => {
            if (!method.startsWith('post')) {
                method = 'post' + method[0].toLocaleUpperCase() + method.slice(1);
            }
            if (!this.methods[method]) {
                reject(new Error(`Method Post ${method} not found!`));
            }
            if (!params)
                params = [];
            this.methods[method].execute(params).then(resolve).catch(reject);
        });
    }
    put(method, params) {
        return new Promise((resolve, reject) => {
            if (!method.startsWith('put')) {
                method = 'put' + method[0].toLocaleUpperCase() + method.slice(1);
            }
            if (!this.methods[method]) {
                reject(new Error(`Method Put ${method} not found!`));
            }
            if (!params)
                params = [];
            this.methods[method].execute(params).then(resolve).catch(reject);
        });
    }
    delete(method, params) {
        return new Promise((resolve, reject) => {
            if (!method.startsWith('delete')) {
                method = 'delete' + method[0].toLocaleUpperCase() + method.slice(1);
            }
            if (!this.methods[method]) {
                reject(new Error(`Method Delete ${method} not found!`));
            }
            if (!params)
                params = [];
            this.methods[method].execute(params).then(resolve).catch(reject);
        });
    }
}
exports.RestManager = RestManager;
