import { Client } from '../../client';
import * as ws from 'ws';
export declare class WebSocketManager {
    private pingLoopInterval;
    private pingLoopTimeout;
    private methods;
    private connection;
    private restManager;
    private username;
    private methodsFolder;
    private isAnonymous;
    private pingFailures;
    private client;
    constructor(client: Client);
    /**
     * @private
     */
    loadMethods(): Promise<void>;
    /**
     * @private
     */
    start(): Promise<void>;
    /**
     * @description Loggin twitch chat.
     * @param {?string} token - The token to use for the connection. If not provided or false, the client will log in as anonymous.
     * @returns {Promise<void>}
     */
    login(token?: string): Promise<void>;
    private onOpen;
    private onMessage;
    private onError;
    private onClose;
    /**
     * @private
     */
    getConnection(): ws.WebSocket;
    /**
     * @private
     */
    pingLoop(): void;
    /**
     * @description Do a ping to twitch.
     * @returns {Promise<void>}
     */
    ping(): Promise<void>;
    /**
     * @description Sends a message in the specified live chat
     * @param {string} channel - The channel to send the message to
     * @param {string[]} message - The message to send
     * @returns {Promise<void>} - Resolves when the message is sent
     */
    sendMessage(channel: string, ...message: string[]): Promise<void>;
    /**
     * @description Disconnects from the twitch server
     * @param {boolean} bypass - Bypass security checks
     * @returns {Promise<void>}
     */
    disconnect(bypass?: boolean): Promise<void>;
}
//# sourceMappingURL=websocketManager.d.ts.map