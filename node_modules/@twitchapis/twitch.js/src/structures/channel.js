"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelStructure = void 0;
const managers_1 = require("../client/managers");
const util_1 = require("util");
class ChannelStructure {
    constructor(client, channelName) {
        var _a;
        this.client = client;
        this.name = channelName;
        this.connected = false;
        this.users = new managers_1.UserManager(client);
        this.emoteOnly = false;
        this.followersOnly = false;
        this.followersCoolDown = -1; // in minutes
        this.r9k = false;
        this.rituals = false;
        this.id = -1;
        this.slowMode = false;
        this.slowCoolDown = 0; // in seconds
        this.subsOnly = false;
        this.self = (_a = this.client.user.username === this.name) !== null && _a !== void 0 ? _a : false;
    }
    /**
       * @description Returns if the bot is connected to the channel
       * @returns {boolean} True if the bot is connected to the channel, false if not
       * @example
       * Client.channels.get('channel-id').isConnected();
       */
    isConnected() {
        return this.connected;
    }
    /**
       * @description Returns the amount of users in the channel
       * @returns {number} The amount of users in the channel
       * @example
       * Client.channels.get('channel-id').getUserCount();
       */
    getUserCount() {
        return this.users.cache.size;
    }
    /**
       * @description Sends a message to the channel
       * @param {string} message - The message to send
       * @param {string | string[]} options - The options to send the message with - Like a console.log()
       * @returns {Promise<void>}
       * @example
       * Client.channels.get('channel-id').send('Hello World!');
       */
    send(message, options) {
        if (!options)
            options = '';
        return this.client.getWebSocketManager().sendMessage(this.name, (0, util_1.format)(message, options));
    }
    /**
     * @description Leaves from the channel
     * @returns {Promise<string>} - The channel name
     */
    leave() {
        return this.client.leave(this.name);
    }
}
exports.ChannelStructure = ChannelStructure;
