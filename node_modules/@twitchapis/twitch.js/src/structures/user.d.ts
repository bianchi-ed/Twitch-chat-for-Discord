import { ChannelStructure } from './channel';
import { Client } from '../client';
export declare class BasicUserStructure {
    client: Client;
    username: string;
    name: string;
    id: string;
    premium: boolean;
    staff: boolean;
    admin: boolean;
    globalMod: boolean;
    self: boolean;
    haveBadges: boolean;
    badges: any;
    userType: boolean;
    constructor(client: Client, data: any);
}
export declare class UserStructure extends BasicUserStructure {
    channel: ChannelStructure;
    color: string;
    displayName: string;
    mod: boolean;
    subscriber: boolean;
    turbo: boolean;
    vip: boolean;
    broadcaster: boolean;
    constructor(client: Client, data: any);
    /**
     * @description Timeout user on a channel
     * @param {?string} channel - The channel to timeout the user on
     * @param {?number} seconds - The amount of seconds to timeout the user for
     * @param {?string} reason - The reason for the timeout
     * @returns {Promise<void>}
     */
    timeout(channel?: string | number, seconds?: number | string, reason?: string): Promise<void>;
    /**
     * @description Remove timeout from user
     * @param {string|string[]} channel the channel to untimeout the user on
     * @returns {Promise<void>}
     */
    untimeout(channel: string | string[]): Promise<void>;
    /**
     * @description Ban user on a channel
     * @param {?string|?Array<string>} channel - The channel to ban the user on
     * @param {?string} reason - The reason for the ban
     * @returns {Promise<void>}
     */
    ban(channel: (string | Array<string> | null), reason: string | null): Promise<void>;
    /**
     * @description Remove ban from user
     * @param {string|Array<string>} channel - The channel to unban the user on
     * @returns {Promise<void>}
     */
    unban(channel: string | string[]): Promise<void>;
}
//# sourceMappingURL=user.d.ts.map