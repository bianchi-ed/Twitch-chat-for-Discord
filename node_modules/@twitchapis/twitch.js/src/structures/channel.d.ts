import { UserManager } from '../client/managers';
import { Client } from '../client';
export declare class ChannelStructure {
    client: Client;
    name: string;
    connected: boolean;
    users: UserManager;
    emoteOnly: boolean;
    followersOnly: boolean;
    followersCoolDown: number;
    r9k: boolean;
    rituals: boolean;
    id: number;
    slowMode: boolean;
    slowCoolDown: number;
    subsOnly: boolean;
    self: boolean;
    constructor(client: Client, channelName: string);
    /**
       * @description Returns if the bot is connected to the channel
       * @returns {boolean} True if the bot is connected to the channel, false if not
       * @example
       * Client.channels.get('channel-id').isConnected();
       */
    isConnected(): boolean;
    /**
       * @description Returns the amount of users in the channel
       * @returns {number} The amount of users in the channel
       * @example
       * Client.channels.get('channel-id').getUserCount();
       */
    getUserCount(): number;
    /**
       * @description Sends a message to the channel
       * @param {string} message - The message to send
       * @param {string | string[]} options - The options to send the message with - Like a console.log()
       * @returns {Promise<void>}
       * @example
       * Client.channels.get('channel-id').send('Hello World!');
       */
    send(message: string, options: string[] | string): Promise<void>;
    /**
     * @description Leaves from the channel
     * @returns {Promise<string>} - The channel name
     */
    leave(): Promise<string>;
}
//# sourceMappingURL=channel.d.ts.map