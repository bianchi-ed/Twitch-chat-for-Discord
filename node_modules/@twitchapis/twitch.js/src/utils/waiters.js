"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForTwitchConnection = exports.waitForToken = void 0;
/**
 * @private
 */
function waitForToken() {
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        var tokenTimeout = null;
        if (this.tokenVerified) {
            this.logger.debug('Login method has already been called continuing on without waiting...');
            resolve();
        }
        else {
            this.logger.debug('Login method has not been called yet, waiting...');
            const tokenVerifier = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                if (this.token !== null) {
                    this.logger.debug('Login method has been called continuing on...');
                    clearInterval(tokenVerifier);
                    if (tokenTimeout) {
                        clearTimeout(tokenTimeout);
                    }
                    resolve();
                }
            }), this.options.loginWaitInterval);
            if (typeof this.options.loginWaitTimeout === 'number' && this.options.loginWaitTimeout > 0) {
                tokenTimeout = setTimeout(() => {
                    this.logger.error('Too long without token!');
                    clearInterval(tokenVerifier);
                    reject('Too long without token!');
                }, this.options.loginWaitTimeout);
            }
        }
    }));
}
exports.waitForToken = waitForToken;
/**
 * @private
 */
function waitForTwitchConnection() {
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        var readyTimeout = null;
        if (this.isReady) {
            this.logger.debug('Twitch has already responded, continuing on without waiting...');
            resolve();
        }
        else {
            this.logger.debug('Twitch still hasn\'t responded, waiting...');
            const connectionVerifier = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                if (this.isReady) {
                    this.logger.debug('Twitch has responded, continuing on...');
                    clearInterval(connectionVerifier);
                    if (readyTimeout) {
                        clearTimeout(readyTimeout);
                    }
                    resolve();
                }
            }), 500);
            if (typeof this.options.connectionWaitTimeout === 'number' && this.options.connectionWaitTimeout > 0) {
                readyTimeout = setTimeout(() => {
                    this.logger.error('Too long without a response from Twitch!');
                    clearInterval(connectionVerifier);
                    reject('Too long without a response from Twitch!');
                }, this.options.connectionWaitTimeout);
            }
        }
    }));
}
exports.waitForTwitchConnection = waitForTwitchConnection;
